package com.malwarescanner;

import static com.malwarescanner.MainActivity.API_KEY;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.malwarescanner.Modelo.AnalisisArchivo;
import com.malwarescanner.Repository.ArchivoRepository;
import com.malwarescanner.databinding.FileScannerBinding;
import com.malwarescanner.databinding.VerArchivoBinding;
import com.malwarescanner.interfaces.AccionesArchivo;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class VerArchivo extends AppCompatActivity {

    private VerArchivoBinding binding;
    AnalisisArchivo archivo;
    Boolean flag;

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.menu_toolbar, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
// Respond to the action bar's Up/Home button
            case android.R.id.home:
                onBackPressed();
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Intent i = getIntent();
        archivo = (AnalisisArchivo) i.getSerializableExtra("archivo");

        binding = VerArchivoBinding.inflate(getLayoutInflater());
        View view = binding.getRoot();
        setContentView(view);

        setSupportActionBar(findViewById(R.id.materialToolbar2));
        getSupportActionBar().setTitle("File Scanner");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);


        binding.nombre.setText("Nombre: " + archivo.getNombreArchivo());
        binding.path.setText("Dirección: " + archivo.getPathArchivo());

        Date fecha = new Date(Long.parseLong(archivo.getFecha()));
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");


        binding.fechaSubida.setText("Fecha de subida: " + df.format(fecha));

        binding.estadoAnalisis.setText("Estado: " + archivo.getEstado());

        binding.botonReporte.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                obtenerReporte(archivo);
            }
        });

        modificarUI();

    }

    public void obtenerReporte(AnalisisArchivo archivo){

        Gson gson = new GsonBuilder()
                .setLenient()
                .create();
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://www.virustotal.com/api/v3/")
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();
        AccionesArchivo accionesArchivo =retrofit.create(AccionesArchivo.class);


        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                Call<JsonObject> llamada = accionesArchivo.getFileReport(API_KEY, archivo.getIdDeteccion());
                Response<JsonObject> res = null;
                try{
                    res = llamada.execute();
                }catch (IOException e){
                    e.printStackTrace();
                }
                if( res!= null){
                    Log.i("TAG", "run: volvio");
                    JsonObject respuesta = res.body().getAsJsonObject("data").getAsJsonObject("attributes");
                    Log.i("TAG", "run: "+ respuesta.get("status").getAsString());
                    if (respuesta.get("status").getAsString().equals("completed")){
                        modificarArchivoEscaneoCompletado(respuesta);
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                modificarUI();
                            }
                        });
                    } else{
                        modificarArchivoEscaneoNoCompletado();
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(VerArchivo.this,"El analisis aun no se ha completado",Toast.LENGTH_LONG).show();
                            }
                        });
                    }
                }
            }
        });

        thread.start();

    }

    private void modificarUI() {
        binding.nombre.setText("Nombre: " + archivo.getNombreArchivo());
        binding.path.setText("Dirección: " + archivo.getPathArchivo());

        Date fecha = new Date(Long.parseLong(archivo.getFecha()));
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");


        binding.fechaSubida.setText("Fecha de subida: " + df.format(fecha));

        binding.estadoAnalisis.setText("Estado: " + archivo.getEstado());

        if(archivo.getEstado().equals("Completado")){
            binding.botonReporte.setVisibility(View.GONE);
            binding.informacion.setVisibility(View.GONE);

            if(archivo.getCantidadDetectados() == 0){
                binding.linearLayout.setBackgroundColor(Color.parseColor("#E6FDC2"));
                binding.reporte.setText("El archivo no esta infectado.");
                binding.reporte.setVisibility(View.VISIBLE);
            }
            else {
                binding.linearLayout.setBackgroundColor(Color.parseColor("#FCBDBD"));
                binding.reporte.setText("Cuidado, el archivo fue detectado como malicioso por " + archivo.getCantidadDetectados() +" antivirus.");
                binding.reporte.setVisibility(View.VISIBLE);
            }
        }
        else {
            if(archivo.getFechaUltimaComprobacion() == null){
                if(System.currentTimeMillis() - Long.parseLong(archivo.getFecha()) < 600000){
                    binding.botonReporte.setEnabled(false);
                }
                else{
                    binding.informacion.setVisibility(View.GONE);
                }
            }
            else {
                if(System.currentTimeMillis() - Long.parseLong(archivo.getFechaUltimaComprobacion()) < 600000){
                    binding.botonReporte.setEnabled(false);
                }
                else{
                    binding.informacion.setVisibility(View.GONE);
                }
            }
        }
    }

    private void modificarArchivoEscaneoCompletado(JsonObject respuesta) {
        archivo.setEstado("Completado");
        archivo.setCantidadDetectados(respuesta.getAsJsonObject("stats").get("suspicious").getAsInt());

        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    ArchivoRepository.getInstance(VerArchivo.this).modificarArchivo(archivo);
                    flag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
        while (flag == false);
    }

    private void  modificarArchivoEscaneoNoCompletado(){
        archivo.setFechaUltimaComprobacion(Long.toString(System.currentTimeMillis()));
        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    ArchivoRepository.getInstance(VerArchivo.this).modificarArchivo(archivo);
                    flag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
        while (flag == false);
    }

}
