package com.malwarescanner;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import android.Manifest;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.ParcelFileDescriptor;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;

import android.widget.Toast;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;

import com.malwarescanner.Modelo.AnalisisArchivo;
import com.malwarescanner.Recycler.ArchivoRecyclerAdapter;
import com.malwarescanner.Repository.ArchivoRepository;
import com.malwarescanner.databinding.FileScannerBinding;
import com.malwarescanner.databinding.MiToolbarBinding;
import com.malwarescanner.interfaces.AccionesArchivo;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URISyntaxException;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;


public class MainActivity extends AppCompatActivity {

    final static String API_KEY = "78d8f5f6897ecd2d9755de0a3fec4f47c9b7885ded2868bf0ed9dee4113b64e4";
    private FileScannerBinding binding;
    private MiToolbarBinding bindingToolbar;
    File archivoElegido;
    String pathGeneral;
    String idArchivoSubido;
    String estadoAnalisis = "";
    JsonObject respuestaAnalisis;
    List<AnalisisArchivo> escaneos;
    Boolean flag;
    Integer codigoRespuesta;

    private RecyclerView recyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager layoutManager;


    Menu menu;

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.menu_toolbar, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menuAyuda:
                Log.i("TAG", "onOptionsItemSelected: Ayuda");
                return true;
            case R.id.menuScanner:
                Log.i("TAG", "onOptionsItemSelected: scanner");
                return true;
            case R.id.menuSMS:
                Log.i("TAG", "onOptionsItemSelected: sms");
                return true;
            case R.id.menuOpciones:
                Log.i("TAG", "onOptionsItemSelected: opciones");
                return true;
            default:
                Toast.makeText(this, ". . . . ", Toast.LENGTH_LONG).show();
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);




        //declaramos el binder
        binding = FileScannerBinding.inflate(getLayoutInflater());
        View view = binding.getRoot();
        setContentView(view);


        setSupportActionBar(findViewById(R.id.materialToolbar2));
        getSupportActionBar().setTitle("File Scanner");

        crearRecyclerView();
        modificarRecyclerView();
        configSwipe();



        binding.floatingActionButton3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
                    //Verifica permisos para Android 6.0+
                    int permissionCheck = ContextCompat.checkSelfPermission(
                            MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE);
                    if (permissionCheck != PackageManager.PERMISSION_GRANTED) {
                        Log.i("Mensaje", "No se tiene permiso para leer.");
                        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 225);
                    } else {
                        Log.i("Mensaje", "Se tiene permiso para leer!");
                    }
                }
                abrirFileChooser();
            }
        });

        binding.floatingActionButton2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new AlertDialog.Builder(MainActivity.this).setTitle("Confirmación")
                        .setMessage("¿Desea eliminar todos los archivos?")
                        .setPositiveButton("Si", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                borrarArchivos();
                                modificarRecyclerView();
                            }
                        })
                        .setNegativeButton("Cancelar",null)
                        .create().show();
            }
        });



    }

    private void borrarArchivos() {

        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    ArchivoRepository.getInstance(MainActivity.this).borrarTodosLosAnalisis();
                    flag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();

        while (!flag){
              Toast.makeText(this,"Por favor, espere mientras se realiza la operación",Toast.LENGTH_LONG).show();
        };

    }

    private void modificarRecyclerView() {
        obtenerEscaneos();
        mAdapter = new ArchivoRecyclerAdapter(escaneos);
        recyclerView.setAdapter(mAdapter);
    }

    private void crearRecyclerView() {
        recyclerView = binding.recyclerId;
        recyclerView.setHasFixedSize(true);
        layoutManager = new GridLayoutManager(this,2);
        recyclerView.setLayoutManager(layoutManager);
    }

    private void configSwipe()      {
        binding.swipe.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                obtenerEscaneos();
                binding.swipe.setRefreshing(false);
                modificarRecyclerView();
            }
        });
    }

    private void abrirFileChooser(){
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        intent.addCategory(Intent.CATEGORY_OPENABLE);

        try {
            startActivityForResult(Intent.createChooser(intent,"Seleccione un archivo"), 100);
        } catch (Exception e) {
            Toast.makeText(this, "Se necesita un administrador de archivos para esta operación", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        if(requestCode==100 && resultCode == RESULT_OK && data != null){
            Uri uri = data.getData();

            String path = null;
            try {
                path = FileUtils.getFilePath(this,uri);
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }


            Log.i("ARCHIVO ELEGIDO", " ");
            Log.i("ARCHIVO ELEGIDO", " ");


            Log.i("ARCHIVO ELEGIDO", "PATH funcion: "+ path);
            archivoElegido = new File(path);
            Log.i("ARCHIVO ELEGIDO", "Existe: "+ archivoElegido.exists());
            Log.i("ARCHIVO ELEGIDO", "Path objeto file: "+ archivoElegido.getPath());
            Log.i("ARCHIVO ELEGIDO", "Path absoluto objeto file: "+ archivoElegido.getAbsolutePath());
            Log.i("ARCHIVO ELEGIDO", "Puedo leer: " + archivoElegido.canRead());
            pathGeneral = getRealPathFromURI_API19_and_later(this, uri);

            new AlertDialog.Builder(this).setTitle("Confirmación")
                    .setMessage("¿Desea subir el archivo seleccionado?")
                    .setPositiveButton("Subir", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                            try {
                                Toast.makeText(getApplicationContext(),"Por favor, espere mientras se realiza la operación",Toast.LENGTH_LONG).show();
                                subirArchivo();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    })
                    .setNegativeButton("Cancelar",null)
                    .create().show();

            //binding.textView.setText("Path: " + path);
            //binding.textView2.setText("File name: " + archivoElegido.getName());
            //binding.textView3.setText("Real path: " + pathGeneral);
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    private void subirArchivo() throws IOException {

        //File file = new File(pathGeneral);


        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), archivoElegido);
        MultipartBody.Part body = MultipartBody.Part.createFormData("file", archivoElegido.getName(), requestFile);

        Gson gson = new GsonBuilder()
                .setLenient()
                .create();
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://www.virustotal.com/api/v3/")
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();
        AccionesArchivo accionesArchivo =retrofit.create(AccionesArchivo.class);

        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {


                    Call<JsonObject> llamada = accionesArchivo.uploadFile(API_KEY,body);

                    Response<JsonObject> res = null;
                    try{
                        res = llamada.execute();
                    }catch (IOException e){
                        e.printStackTrace();
                    }
                    JsonObject respuesta = res.body().getAsJsonObject("data");
                    idArchivoSubido = respuesta.get("id").getAsString();
                    System.out.println(idArchivoSubido);
                    System.out.println(res.code());
                    codigoRespuesta = res.code();

                    if(codigoRespuesta == 200){
                        AnalisisArchivo archivo = new AnalisisArchivo(System.currentTimeMillis(), archivoElegido.getName(), pathGeneral,idArchivoSubido);
                        upload(archivo);

                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(getApplicationContext(),"Archivo subido correctamente", Toast.LENGTH_LONG);
                                modificarRecyclerView();
                            }
                        });
                    } else if (codigoRespuesta == null) {
                        Log.i("miapp", "fallo xd");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
    }

    private void upload(AnalisisArchivo archivoAsubir) {

        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    ArchivoRepository.getInstance(MainActivity.this).insertarScan(archivoAsubir);
                    flag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                while (!flag){

                };
            }
        });


    }




    public static String getRealPathFromURI_API19_and_later(Context context, Uri uri){
        String filePath = "";
        String wholeID = DocumentsContract.getDocumentId(uri);

        // Split at colon, use second item in the array
        String id = wholeID.split(":")[1];

        String[] column = { MediaStore.Images.Media.DATA };

        // where id is equal to
        String sel = MediaStore.Images.Media._ID + "=?";

        Cursor cursor = context.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                column, sel, new String[]{ id }, null);

        int columnIndex = cursor.getColumnIndex(column[0]);

        if (cursor.moveToFirst()) {
            filePath = cursor.getString(columnIndex);
        }
        cursor.close();
        return filePath;
    }

    public List<AnalisisArchivo> obtenerEscaneos(){
        List<AnalisisArchivo> lista;
        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    escaneos = ArchivoRepository.getInstance(MainActivity.this).obtenerDetecciones();
                    System.out.println("anduvo?");
                    flag = true;

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
        while (flag == false);

        return escaneos;
    }




  }