package com.malwarescanner;

import  android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.malwarescanner.Modelo.AnalisisSMS;
import com.malwarescanner.Recycler.SMSRecyclerAdapter;
import com.malwarescanner.Repository.SMSRepository;
import com.malwarescanner.databinding.SmsScannerBinding;
import com.malwarescanner.utils.FAQSMS;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ListaSMS extends AppCompatActivity {

    private SmsScannerBinding binding;

    private RecyclerView recyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager layoutManager;

    private List<AnalisisSMS> listaSMS;
    private Boolean flag;

    Menu menu;

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.menu_toolbar, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menuAyuda:
                Log.i("TAG", "onOptionsItemSelected: Ayuda");
                Intent i1 = new Intent(this, FAQSMS.class);
                startActivity(i1);
                return true;
            case R.id.menuScanner:
                onBackPressed();
                return true;
            case R.id.menuSMS:
                //no hace nada porque ya estoy aca
            case R.id.menuOpciones:
                Log.i("TAG", "onOptionsItemSelected: opciones");
                Intent i3 = new Intent(this,Settings.class);
                startActivity(i3);
                return true;
            default:
                Toast.makeText(this, ". . . . ", Toast.LENGTH_LONG).show();
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = SmsScannerBinding.inflate(getLayoutInflater());
        View view = binding.getRoot();
        setContentView(view);

        setSupportActionBar(findViewById(R.id.materialToolbar2));
        getSupportActionBar().setTitle("Anti SMS Phishing");


        crearRecyclerView();
        modificarRecyclerView(obtenerSMSconPhishing());


        //tomo cada palabra de cada mensaje y me fijo si es una URL. Si un mensaje contiene una URL lo marco como posible Phishing
        binding.nuevoSMS.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                new AlertDialog.Builder(ListaSMS.this).setTitle("Confirmación")
                        .setMessage("¿Desea inspeccionar los SMS? Esta acción borrara los registros actuales en caso de que los haya")
                        .setPositiveButton("Si", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                List<AnalisisSMS> listaSMSbandejaEntrada = obtenerSMS();
                                Boolean contieneURL = false;
                                Boolean bandejaVacia = true;
                                if (listaSMSbandejaEntrada.size() != 0){
                                    bandejaVacia = false;
                                    listaSMS = new ArrayList<AnalisisSMS>();
                                    for (AnalisisSMS sms: listaSMSbandejaEntrada) {
                                        String[] texto = sms.getTexto().split(" ");
                                        for (String palabra: texto) {
                                            if(validarURL(palabra)){
                                                contieneURL = true;
                                            }
                                        }
                                        if (contieneURL == true){
                                            listaSMS.add(sms);
                                        }
                                        contieneURL = false;
                                    }
                                } else {
                                    Toast.makeText(getApplicationContext(),"No hay mensajes en la bandeja de entrada",Toast.LENGTH_SHORT).show();
                                }

                                if(!bandejaVacia){
                                    if (listaSMS.size() == 0) {
                                        Toast.makeText(getApplicationContext(),"No se detectan mensajes posibles como Pishing",Toast.LENGTH_SHORT).show();
                                    } else{
                                        modificarRecyclerView(listaSMS);
                                        guardarSMSenBaseDatos(listaSMS);
                                    }

                                }
                            }
                        })
                        .setNegativeButton("Cancelar",null)
                        .create().show();


            }
        });

        binding.borrarSMS.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if(listaSMS.size() == 0 ) {
                    Toast.makeText(getApplicationContext(), "No hay SMS para borrar",Toast.LENGTH_SHORT).show();
                } else{
                    new AlertDialog.Builder(ListaSMS.this).setTitle("Confirmación")
                            .setMessage("¿Desea eliminar todos los SMS?")
                            .setPositiveButton("Si", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialogInterface, int i) {
                                    borrarSMSguardados();
                                    listaSMS.removeAll(listaSMS);
                                    modificarRecyclerView(listaSMS);
                                    binding.textoNoMensajes.setVisibility(View.VISIBLE);
                                }
                            })
                            .setNegativeButton("Cancelar",null)
                            .create().show();
                }
            }
        });




    }


    //obtiene todos los sms de la bandeja de entrada
    public List<AnalisisSMS> obtenerSMS(){
        Cursor cur = getContentResolver().query(Uri.parse("content://sms/inbox"), null, null, null, null);

        List<AnalisisSMS> lista = new ArrayList<AnalisisSMS>();

        if (cur.moveToFirst()) { /* false = no sms */
            do {

                AnalisisSMS SMS = new AnalisisSMS();
                SMS.setEnviadoPor(cur.getString(2));
                SMS.setFechaRecibido(cur.getString(5));
                SMS.setTexto(cur.getString(12));

                lista.add(SMS);

            } while (cur.moveToNext());
        }

        return lista;
    }

    //valida si un string es una URL
    public static Boolean validarURL(String url){
        /*expresión regular*/
        String URL_REGEX =
                "^((((https?|ftps?|gopher|telnet|nntp)://)|(mailto:|news:))" +
                        "(%{2}|[-()_.!~*';/?:@&=+$, A-Za-z0-9])+)" + "([).!';/?:, ][[:blank:]])?$";
        Pattern URL_PATTERN = Pattern.compile(URL_REGEX);

        if (url == null) {
            return false;
        }
        Matcher matcher = URL_PATTERN.matcher(url);
        return matcher.matches();
    }

    private void crearRecyclerView() {
        recyclerView = binding.recyclerSMS;
        recyclerView.setHasFixedSize(true);
        layoutManager = new LinearLayoutManager(this);
        recyclerView.setLayoutManager(layoutManager);

    }

    public void modificarRecyclerView(List<AnalisisSMS> smsAnalizados){

        mAdapter = new SMSRecyclerAdapter(smsAnalizados);
        recyclerView.setAdapter(mAdapter);
        if (smsAnalizados.size() != 0) {
            binding.textoNoMensajes.setVisibility(View.GONE);
            binding.mensajesPhishing.setVisibility(View.VISIBLE);
        } else{
            binding.mensajesPhishing.setVisibility(View.GONE);
        }
    }

    //recupera los sms guardados de la bd
    public List<AnalisisSMS> obtenerSMSconPhishing(){

        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    listaSMS = SMSRepository.getInstance(getApplicationContext()).obtenerSMSconPhishing();
                    System.out.println("anduvo?");
                    flag = true;

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
        while (flag == false);

        return listaSMS;
    }

    //guarda los sms que se detectaron como phishing en la bd
    public void guardarSMSenBaseDatos(List<AnalisisSMS> lista){

        borrarSMSguardados();
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    for (AnalisisSMS sms: lista) {
                        SMSRepository.getInstance(getApplicationContext()).insertarSMS(sms);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
    }

    //borra los sms guardados en la bd
    public void borrarSMSguardados(){

        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    SMSRepository.getInstance(getApplicationContext()).borrarTodosLosSMS();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
        Toast.makeText(this,"Por favor, espere mientras se realiza la operación",Toast.LENGTH_SHORT).show();

    }
}



