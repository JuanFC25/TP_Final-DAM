package com.malwarescanner;


import android.annotation.SuppressLint;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import com.malwarescanner.Modelo.AnalisisArchivo;
import com.malwarescanner.Repository.ArchivoRepository;
import com.malwarescanner.databinding.VerArchivoBinding;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class VerArchivo extends AppCompatActivity {

    private VerArchivoBinding binding;
    AnalisisArchivo archivo;
    Boolean flag;


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Intent i = getIntent();
        archivo = (AnalisisArchivo) i.getSerializableExtra("archivo");


        binding = VerArchivoBinding.inflate(getLayoutInflater());
        View view = binding.getRoot();
        setContentView(view);

        setSupportActionBar(findViewById(R.id.materialToolbar2));
        getSupportActionBar().setTitle("Ver archivo");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);


        binding.nombre.setText("Nombre: " + archivo.getNombreArchivo());
        binding.path.setText("Dirección: " + archivo.getPathArchivo());

        Date fecha = new Date(Long.parseLong(archivo.getFecha()));
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");


        binding.fechaSubida.setText("Fecha de subida: " + df.format(fecha));

        binding.estadoAnalisis.setText("Estado: " + archivo.getEstado());

        binding.cancelarAnalisis.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new AlertDialog.Builder(VerArchivo.this).setTitle("Confirmación")
                        .setMessage("¿Esta seguro que desea cancelar el analisis?")
                        .setPositiveButton("Si", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                borrarArchivo();
                                Toast.makeText(getApplicationContext(),"Analisis cancelado, ya puede regresar",Toast.LENGTH_SHORT).show();
                            }
                        })
                        .setNegativeButton("Cancelar",null)
                        .create().show();
            }
        });

        binding.botonBorrarAnalisis.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new AlertDialog.Builder(VerArchivo.this).setTitle("Confirmación")
                        .setMessage("¿Esta seguro que desea eliminar el analisis?")
                        .setPositiveButton("Si", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                borrarArchivo();
                                Toast.makeText(getApplicationContext(),"Analisis borrado, ya puede regresar",Toast.LENGTH_SHORT).show();
                            }
                        })
                        .setNegativeButton("Cancelar",null)
                        .create().show();
            }
        });

        binding.botonBorrarArchivo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Toast.makeText(getApplicationContext(),"Funcionalidad no implementada",Toast.LENGTH_SHORT).show();
                /*new AlertDialog.Builder(VerArchivo.this).setTitle("Confirmación")
                        .setMessage("¿Esta seguro que desea eliminar el archivo?")
                        .setPositiveButton("Si", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                if(!borrarArchivoAlmacenamiento()){
                                    Toast.makeText(getApplicationContext(),"No se puede encontrar el archivo",Toast.LENGTH_SHORT).show();
                                } else {
                                    borrarArchivo();
                                    Toast.makeText(getApplicationContext(),"Archivo borrado, ya puede regresar",Toast.LENGTH_SHORT).show();
                                }
                            }
                        })
                        .setNegativeButton("Cancelar",null)
                        .create().show();*/
            }
        });

        modificarUI();


    }

    private Boolean borrarArchivoAlmacenamiento() {
        File fdelete = new File(archivo.getPathArchivo());
        Boolean a = fdelete.exists();
        Boolean b = fdelete.canWrite();

        if (fdelete.exists()) {
            if (fdelete.delete()) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }


    @SuppressLint("ResourceAsColor")
    private void modificarUI() {
        binding.nombre.setText( archivo.getNombreArchivo());
        binding.path.setText("Dirección: " + archivo.getPathArchivo());

        Date fecha = new Date(Long.parseLong(archivo.getFecha()));
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");


        binding.fechaSubida.setText("Fecha de subida: " + df.format(fecha));

        binding.estadoAnalisis.setText("Estado: " + archivo.getEstado());

        if(archivo.getEstado().equals("Completado")){
            binding.cancelarAnalisis.setVisibility(View.GONE);

            if(archivo.getCantidadDetectados() == 0){
                binding.layoutImagen.setBackgroundColor(Color.parseColor("#3cbb4c"));
                binding.imagenEstado.setImageResource(R.mipmap.done_ver_archivo_foreground);
                binding.reporte.setText("El archivo no esta infectado.");
                binding.reporte.setVisibility(View.VISIBLE);
            }
            else {
                binding.imagenEstado.setImageResource(R.mipmap.infected_ver_archivo_foreground);
                binding.layoutImagen.setBackgroundColor(Color.parseColor("#33B5E5"));
                binding.reporte.setText("Cuidado, el archivo fue detectado como malicioso por " + archivo.getCantidadDetectados() +" antivirus.");
                binding.reporte.setVisibility(View.VISIBLE);
            }
        }
        else {
            binding.imagenEstado.setImageResource(R.mipmap.processing_ver_archivo_foreground);
            binding.layoutImagen.setBackgroundColor(Color.parseColor("#19a7f8"));
            binding.botonBorrarAnalisis.setVisibility(View.GONE);
            binding.botonBorrarArchivo.setVisibility(View.GONE);
        }
    }

    //ya no es necesaria
//    private void modificarArchivoEscaneoCompletado(JsonObject respuesta) {
//        archivo.setEstado("Completado");
//        archivo.setCantidadDetectados(respuesta.getAsJsonObject("stats").get("suspicious").getAsInt());
//
//        flag = false;
//        Thread thread = new Thread(new Runnable() {
//
//            @Override
//            public void run() {
//                try  {
//                    ArchivoRepository.getInstance(VerArchivo.this).modificarArchivo(archivo);
//                    flag = true;
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//
//        thread.start();
//        while (flag == false);
//    }

    private void  borrarArchivo(){
        flag = false;
        Thread thread = new Thread(new Runnable() {

            @Override
            public void run() {
                try  {
                    ArchivoRepository.getInstance(getApplicationContext()).borrarAnalisis(archivo);
                    flag = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        thread.start();
        while (flag == false);
    }
}
